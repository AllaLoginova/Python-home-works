import sqlite3

with sqlite3.connect('notes.db') as connection:
    cursor = connection.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        password TEXT
        )""")

    cursor.execute("""CREATE TABLE IF NOT EXISTS note (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        raiting INTEGER DEFAULT 0,
        user_id INTEGER NOT NULL,
        CONSTRAINT user_id_fk FOREIGN KEY (user_id) REFERENCES users (ID)
        )""")

    cursor.execute('INSERT INTO users (name, password) VALUES (?, ?)', ('–ê–ª–ª–∞', 123))
    cursor.execute('INSERT INTO users (name, password) VALUES (?, ?)', ('–¢–∞—Ç—å—è–Ω–∞', 1234))
    cursor.execute('INSERT INTO users (name, password) VALUES (?, ?)', ('–ù–∏–∫–æ–ª–∞–π', 12345))


class Database:
    def __init__(self, db_name):
        self.db_name = db_name
        self.con = sqlite3.connect(self.db_name)

    def add_note(self, note, raiting, user_id):
        with self.con as con:
            cur = con.cursor()
            cur.execute('INSERT INTO note (name, raiting, user_id) VALUES (?, ?, ?)', (note, raiting, user_id))
            
    def get_one_note(self, note_id, user_id):
        # with self.con as con:
            cur = self.con.cursor()
            cur.execute('SELECT name, raiting FROM note WHERE ID = ? AND user_id = ?', (note_id, user_id))
            row = cur.fetchall()
            return row

    def get_all_notes(self, user_id):
        # with self.con as con:
            cur = self.con.cursor()
            cur.execute('SELECT * FROM note WHERE user_id = ?', (user_id,))
            rows = cur.fetchall()
            return rows

    def get_most_popular_notes(self, user_id):
        # with self.con as con:
            cur = self.con.cursor()
            cur.execute('SELECT name FROM note WHERE raiting > 3 and user_id = ?', (user_id,))
            rows = cur.fetchall()
            return rows

    def delete_all_notes(self, user_id):
        with self.con as con:
            cur = con.cursor()
            cur.execute('DELETE FROM note WHERE user_id = ?', (user_id,))

    def __del__(self):
        print('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
        self.con.close()


db = Database('notes.db')

name = input('–í–≤–µ–¥–∏ –∏–º—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ')
password = input('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å: ')

db_name = 'notes.db'

auth = False
with sqlite3.connect(db_name) as con:
    cur = con.cursor()
    row = cur.execute('SELECT * FROM users WHERE name = ? and password = ?', (name, password))
    res = row.fetchone()

    if res:
        auth = True
        user_id = res[0]
        print('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        print('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

while True and auth:
    print('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?')
    print('1 - –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏')
    print('2 - –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–¥–Ω—É –∑–∞–º–µ—Ç–∫—É')
    print('3 - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
    print('4 - –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏')
    print('5 - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏')
    print('q - –≤—ã—Ö–æ–¥')

    res = input('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä ')

    if res == '1':
        rows = db.get_all_notes(user_id)
        print('–í–æ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ üëÅÔ∏è')
        for row in rows:
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {row[1]}, –†–µ–π—Ç–∏–Ω–≥: {row[2]}")

    if res == '2':
        note_id = input('–í–≤–µ–¥–∏—Ç–µ id –∑–∞–º–µ—Ç–∫–∏ ')
        print('–í–æ—Ç –≤–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞ üòé')
        result = db.get_one_note(note_id, user_id)
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result[0][0]}, –†–µ–π—Ç–∏–Ω–≥: {result[0][1]}")

    if res == '3':
        text_note = input('–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ ')
        rating_note = input('–í–≤–µ–¥–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞–º–µ—Ç–∫–∏ ')
        db.add_note(text_note, rating_note, user_id)
        print('–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üåû')

    if res == '4':
        notes = db.get_most_popular_notes(user_id)
        print('–í–æ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ ‚û°Ô∏è')
        for note in notes:
            print(*note)

    if res == '5':
        db.delete_all_notes(user_id)
        print('–í—ã –≤—Å—ë —É–¥–∞–ª–∏–ª–∏ üò¢')

    if res == 'q':
        break
